{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;ACxHC;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;ACnCJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb,eAAe,mBAAO,CAAC,mCAAQ;AAC/B,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;AC9BA;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;ACxCL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd,eAAe,mBAAO,CAAC,mCAAQ;AAC/B,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;AC5CD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAA4D;AAC1F,gCAAgC,kEAAkE;AAClG,gCAAgC,4DAA4D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;AC1EC;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd,gBAAgB,mBAAO,CAAC,qCAAS;AACjC,eAAe,mBAAO,CAAC,mCAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;AChDD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,qCAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;AC9BJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;AClED;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,aAAa,GAAG,oBAAoB,GAAG,iBAAiB;AAC9E;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC,iBAAiB,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B,aAAa,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC,mBAAmB,KAAK;;;;;;;;;;;AChCpD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;UCVZ;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,mBAAO,CAAC,uCAAU;AACnC,iBAAiB,mBAAO,CAAC,uCAAU;AACnC,iBAAiB,mBAAO,CAAC,uCAAU;AACnC,oBAAoB,mBAAO,CAAC,6CAAa;AACzC,qBAAqB,mBAAO,CAAC,+CAAc;AAC3C,oBAAoB,mBAAO,CAAC,6CAAa;AACzC,eAAe,mBAAO,CAAC,mCAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://arkanoid/./public/js/Ball.js","webpack://arkanoid/./public/js/BallArray.js","webpack://arkanoid/./public/js/Block.js","webpack://arkanoid/./public/js/BlockArray.js","webpack://arkanoid/./public/js/Fabric.js","webpack://arkanoid/./public/js/Game.js","webpack://arkanoid/./public/js/Player.js","webpack://arkanoid/./public/js/Statistic.js","webpack://arkanoid/./public/js/canvas.js","webpack://arkanoid/./public/js/enums.js","webpack://arkanoid/./public/js/rect.js","webpack://arkanoid/webpack/bootstrap","webpack://arkanoid/./public/js/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ball = void 0;\nconst enums_1 = require(\"./enums\");\nclass Ball {\n    // private sleep : number;\n    constructor(coord, radius, color, speed) {\n        this.coord = coord;\n        this.radius = radius;\n        this.color = color;\n        this.speed = speed;\n        // this.sleep = 0;\n    }\n    draw(canvas) {\n        canvas === null || canvas === void 0 ? void 0 : canvas.circle(...this.coord, this.radius, this.color);\n    }\n    changeSpeed(intersect) {\n        switch (intersect) {\n            case enums_1.Intersection.Left:\n            case enums_1.Intersection.Right:\n                this.speed[0] *= -1;\n                break;\n            case enums_1.Intersection.Up:\n            case enums_1.Intersection.Down:\n                this.speed[1] *= -1;\n                break;\n        }\n    }\n    intersect(canvas, player) {\n        if (this.coord[0] - this.radius < 0)\n            this.speed[0] *= -1;\n        if (this.coord[0] + this.radius > canvas.getWidth())\n            this.speed[0] *= -1;\n        if (this.coord[1] - this.radius < 0)\n            this.speed[1] *= -1;\n        if (this.coord[1] + this.radius > canvas.getHeight()) {\n            this.speed[1] *= -1;\n            return false;\n        }\n        let intersect = this.intersectWithRect(player.getRect());\n        if (intersect != enums_1.Intersection.None)\n            intersect = enums_1.Intersection.Up;\n        this.changeSpeed(intersect);\n        if (intersect == enums_1.Intersection.Up) {\n            let rect = player.getRect();\n            if (this.coord[0] > rect.coord[0] + rect.size[0] / 2)\n                this.speed[0] = this.changeSpeedOnX(this.speed[0], \"right\");\n            if (this.coord[0] > rect.coord[0] &&\n                this.coord[0] < rect.coord[0] + rect.size[0] / 2)\n                this.speed[0] = this.changeSpeedOnX(this.speed[0], \"left\");\n        }\n        return true;\n    }\n    changeSpeedOnX(speed, dir) {\n        if (dir == \"left\") {\n            if (speed > 0)\n                return -speed + Math.random() / 10;\n            return speed - Math.random() / 100;\n        }\n        else {\n            if (speed < 0)\n                return -speed + Math.random() / 10;\n            return speed - Math.random() / 100;\n        }\n    }\n    intersectWithBlockArray(blockArray) {\n        let blocks = blockArray.getArray();\n        for (let i = 0; i < blocks.length; i++) {\n            let intersect = this.intersectWithRect(blocks[i].getRect());\n            this.changeSpeed(intersect);\n            if (intersect != enums_1.Intersection.None) {\n                let block = blocks[i];\n                block.decrementLife();\n                //     if(!block.getLife())  blocks.splice(i, 1), i--;\n            }\n        }\n    }\n    move(canvas, player, blockArray) {\n        // let speed = [...this.speed];\n        // let res = true;\n        // if(this.sleep) this.sleep--;\n        // else{\n        let res = this.intersect(canvas, player);\n        this.intersectWithBlockArray(blockArray);\n        // }\n        // if(this.speed[0] != speed[0] || this.speed[1] != speed[1]) this.sleep = 1;\n        this.coord[0] += this.speed[0];\n        this.coord[1] += this.speed[1];\n        return res;\n    }\n    intersectWithRect(rect) {\n        if (this.coord[0] + this.radius > rect.coord[0] &&\n            this.coord[0] < rect.coord[0] + rect.size[0] / 8 &&\n            this.coord[1] > rect.coord[1] &&\n            this.coord[1] < rect.coord[1] + rect.size[1])\n            return enums_1.Intersection.Left;\n        if (this.coord[1] + this.radius > rect.coord[1] &&\n            this.coord[1] < rect.coord[1] + rect.size[1] / 8 &&\n            this.coord[0] > rect.coord[0] &&\n            this.coord[0] < rect.coord[0] + rect.size[0])\n            return enums_1.Intersection.Up;\n        if (this.coord[0] - this.radius < rect.coord[0] + rect.size[0] &&\n            this.coord[0] > rect.coord[0] + rect.size[0] / 8 &&\n            this.coord[1] > rect.coord[1] &&\n            this.coord[1] < rect.coord[1] + rect.size[1])\n            return enums_1.Intersection.Right;\n        if (this.coord[1] - this.radius < rect.coord[1] + rect.size[1] &&\n            this.coord[1] > rect.coord[1] + rect.size[1] / 8 &&\n            this.coord[0] > rect.coord[0] &&\n            this.coord[0] < rect.coord[0] + rect.size[0])\n            return enums_1.Intersection.Down;\n        return enums_1.Intersection.None;\n    }\n    getSpeed() {\n        return this.speed;\n    }\n    setSpeed(speed) {\n        this.speed = speed;\n    }\n}\nexports.Ball = Ball;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BallArray = void 0;\nconst enums_1 = require(\"./enums\");\nclass BallArray {\n    constructor(balls) {\n        this.array = balls;\n    }\n    subscribe(stat) {\n        this.statistic = stat;\n    }\n    push(ball) {\n        this.array.push(ball);\n    }\n    move(canvas, player, blockArray) {\n        for (let i = 0; i < this.array.length; i++) {\n            let res = this.array[i].move(canvas, player, blockArray);\n            if (!res && !!this.statistic) {\n                this.statistic.update(enums_1.Information.BallIsLost);\n                this.array.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    draw(canvas) {\n        for (let item of this.array)\n            item.draw(canvas);\n    }\n    clear() {\n        this.array = [];\n    }\n    getArray() {\n        return this.array;\n    }\n}\nexports.BallArray = BallArray;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Block = void 0;\nconst rect_1 = require(\"./rect\");\nconst enums_1 = require(\"./enums\");\nclass Block {\n    constructor(coord, size, life) {\n        this.life = life;\n        this.rect = new rect_1.Rect(coord, size, enums_1.Color[life]);\n    }\n    subscribe(stat) {\n        this.statistic = stat;\n    }\n    getRect() {\n        return this.rect;\n    }\n    draw(canvas) {\n        canvas === null || canvas === void 0 ? void 0 : canvas.rectangle(this.rect);\n    }\n    getLife() {\n        return this.life;\n    }\n    decrementLife() {\n        if (!this.statistic)\n            return;\n        this.statistic.update(enums_1.Information.HitOnBlock);\n        this.life--;\n        this.rect.color = enums_1.Color[this.life];\n    }\n}\nexports.Block = Block;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockArray = void 0;\nconst enums_1 = require(\"./enums\");\nclass BlockArray {\n    constructor(array) {\n        this.array = array;\n    }\n    subscribe(stat) {\n        this.statistic = stat;\n    }\n    push(array) {\n        this.array = array;\n        if (!this.statistic)\n            return;\n        for (let item of this.array) {\n            item.subscribe(this.statistic);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    getArray() {\n        return this.array;\n    }\n    draw(canvas) {\n        for (let i = 0; i < this.array.length; i++) {\n            if (!this.array[i].getLife()) {\n                if (!this.statistic)\n                    return;\n                this.statistic.update(enums_1.Information.BlockIsDestroyed);\n                this.array.splice(i, 1);\n                i--;\n            }\n            else {\n                this.array[i].draw(canvas);\n            }\n        }\n    }\n}\nexports.BlockArray = BlockArray;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fabric = void 0;\nconst Ball_1 = require(\"./Ball\");\nconst Block_1 = require(\"./Block\");\nclass Fabric {\n    constructor(canvasSize, sizeBlock) {\n        this.canvasSize = canvasSize;\n        this.sizeBlock = sizeBlock;\n    }\n    generateBlockArray(columns, rows) {\n        let output = [];\n        let col = Math.floor(this.canvasSize[0] / this.sizeBlock[0]);\n        if (columns > col)\n            columns = col;\n        let offsetX = (this.canvasSize[0] - this.sizeBlock[0] * columns) / (columns + 1);\n        let offsetY = 5;\n        for (let i = 0; i < rows; i++) {\n            let life = (i % 5);\n            for (let j = 0; j < columns; j++) {\n                let block = new Block_1.Block([\n                    offsetX * (j + 1) + this.sizeBlock[0] * j,\n                    offsetY * (i + 1) + this.sizeBlock[1] * i,\n                ], this.sizeBlock, \n                // 5);\n                (5 - life));\n                // if((j + i) % 2 == 0)\n                output.push(block);\n            }\n        }\n        return output;\n    }\n    generateBall(player) {\n        let generateSpeed = (max) => {\n            let speed = Math.random() * max - max / 2;\n            if (Math.abs(speed) < max / 4)\n                return generateSpeed(max);\n            return speed;\n        };\n        let rect = player.getRect();\n        let ball = new Ball_1.Ball([rect.coord[0] + rect.size[0] / 2, rect.coord[1] - 10], 4, \"black\", [generateSpeed(10), generateSpeed(18)]);\n        return ball;\n    }\n}\nexports.Fabric = Fabric;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Game = void 0;\nclass Game {\n    constructor(canvas, player, ballArray, blockArray, fabric) {\n        this.canvas = canvas;\n        this.player = player;\n        this.ballArray = ballArray;\n        this.blockArray = blockArray;\n        this.fabric = fabric;\n    }\n    subscribe(stat) {\n        this.statistic = stat;\n    }\n    draw() {\n        this.checkGameState();\n        this.canvas.clear();\n        this.player.move(this.canvas);\n        this.player.draw(this.canvas);\n        this.ballArray.move(this.canvas, this.player, this.blockArray);\n        this.ballArray.draw(this.canvas);\n        this.blockArray.draw(this.canvas);\n        if (this.stop)\n            return;\n        requestAnimationFrame(() => this.draw());\n    }\n    start(fabric) {\n        this.stop = false;\n        this.player.getRect().coord = [\n            this.canvas.getWidth() / 2 - 50,\n            this.canvas.getHeight() - 40,\n        ];\n        this.ballArray.clear();\n        this.ballArray.push(fabric.generateBall(this.player));\n        this.ballArray.push(fabric.generateBall(this.player));\n        this.ballArray.push(fabric.generateBall(this.player));\n        this.blockArray.clear();\n        this.blockArray.push(fabric.generateBlockArray(9, 5));\n        this.draw();\n    }\n    pause() {\n        this.stop = !this.stop;\n        if (!this.stop)\n            this.draw();\n    }\n    showStatistic() {\n        var _a;\n        let data = (_a = this.statistic) === null || _a === void 0 ? void 0 : _a.getData();\n        let output = `\r\n            Шаров потеряно: ${data === null || data === void 0 ? void 0 : data.BallIsLost},\r\n            Блоков разрушено: ${data === null || data === void 0 ? void 0 : data.BlockIsDestroyed},\r\n            Ударов по блокам: ${data === null || data === void 0 ? void 0 : data.HitOnBlock}`;\n        return output;\n    }\n    checkGameState() {\n        let [loss, end] = [false, false];\n        if (this.ballArray.getArray().length == 0) {\n            [loss, end] = [true, true];\n        }\n        if (this.blockArray.getArray().length == 0) {\n            [loss, end] = [false, true];\n        }\n        if (end) {\n            let str = \"\";\n            loss ? (str = \"Увы, Вы проиграли!\\n\") : (str = \"Ура, Вы выиграли!\\n\");\n            alert(str + this.showStatistic());\n            this.stop = true;\n            setTimeout(() => {\n                this.start(this.fabric);\n            }, 1);\n            return;\n        }\n    }\n}\nexports.Game = Game;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Player = void 0;\nconst enums_1 = require(\"./enums\");\nconst rect_1 = require(\"./rect\");\nclass Player {\n    constructor(coord, size, color, speed) {\n        this.rect = new rect_1.Rect(coord, size, color);\n        this.listen();\n        this.speed = speed ? speed : 10;\n        this.direction = enums_1.Direction.Stop;\n    }\n    move(canvas) {\n        switch (this.direction) {\n            case enums_1.Direction.Left:\n                if (this.rect.coord[0] <= 0)\n                    return;\n                this.rect.coord[0] -= this.speed;\n                break;\n            case enums_1.Direction.Right:\n                if (this.rect.coord[0] + this.rect.size[0] >= canvas.getWidth())\n                    return;\n                this.rect.coord[0] += this.speed;\n                break;\n        }\n    }\n    listen() {\n        document.addEventListener(\"keydown\", (event) => {\n            switch (event.code) {\n                case \"KeyA\":\n                    this.direction = enums_1.Direction.Left;\n                    break;\n                case \"KeyD\":\n                    this.direction = enums_1.Direction.Right;\n                    break;\n            }\n        });\n        document.addEventListener(\"keyup\", (event) => {\n            this.direction = enums_1.Direction.Stop;\n        });\n    }\n    draw(canvas) {\n        canvas === null || canvas === void 0 ? void 0 : canvas.rectangle(this.rect);\n    }\n    getRect() {\n        return this.rect;\n    }\n}\nexports.Player = Player;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Statistic = void 0;\nconst enums_1 = require(\"./enums\");\nclass Statistic {\n    constructor() {\n        this.data = {\n            BlockIsDestroyed: 0,\n            BallIsLost: 0,\n            HitOnBlock: 0,\n            Clear: 0,\n        };\n    }\n    init() {\n        this.data = {\n            BlockIsDestroyed: 0,\n            BallIsLost: 0,\n            HitOnBlock: 0,\n            Clear: 0,\n        };\n    }\n    update(message) {\n        this.data[message]++;\n        if (message == enums_1.Information.Clear)\n            this.init();\n    }\n    getData() {\n        return this.data;\n    }\n}\nexports.Statistic = Statistic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nclass Canvas {\n    constructor(width, height, color) {\n        var _a;\n        this.setColor(color);\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.width = width;\n        this.height = height;\n        this.ctx = this.canvas.getContext(\"2d\");\n        (_a = document.querySelector(\"body\")) === null || _a === void 0 ? void 0 : _a.appendChild(this.canvas);\n    }\n    line(x1, y1, x2, y2, color, lineWidth) {\n        if (!this.ctx)\n            return;\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.closePath();\n        this.setColor(color);\n        this.ctx.lineWidth = (lineWidth) ? lineWidth : 1;\n        this.ctx.stroke();\n    }\n    circle(x, y, radius, color) {\n        if (!this.ctx)\n            return;\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n        this.ctx.closePath();\n        this.setColor(color);\n        this.ctx.fill();\n    }\n    rectangle(rect) {\n        this.rect(...rect.coord, ...rect.size, rect.color);\n    }\n    rect(x, y, width, height, color) {\n        if (!this.ctx)\n            return;\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, width, height);\n        this.ctx.closePath();\n        this.setColor(color);\n        this.ctx.fill();\n    }\n    setColor(color) {\n        var _a, _b;\n        if (!this.ctx)\n            return;\n        (color) ? this.color = color : 'white';\n        this.ctx.strokeStyle = (_a = this.color) !== null && _a !== void 0 ? _a : 'white';\n        this.ctx.fillStyle = (_b = this.color) !== null && _b !== void 0 ? _b : 'white';\n    }\n    clear() {\n        var _a;\n        (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.clearRect(0, 0, this.width, this.height);\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n}\nexports.Canvas = Canvas;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Information = exports.Color = exports.Intersection = exports.Direction = void 0;\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"Stop\"] = 0] = \"Stop\";\n    Direction[Direction[\"Right\"] = 1] = \"Right\";\n    Direction[Direction[\"Left\"] = 2] = \"Left\";\n})(Direction = exports.Direction || (exports.Direction = {}));\nvar Intersection;\n(function (Intersection) {\n    Intersection[Intersection[\"None\"] = 0] = \"None\";\n    Intersection[Intersection[\"Left\"] = 1] = \"Left\";\n    Intersection[Intersection[\"Up\"] = 2] = \"Up\";\n    Intersection[Intersection[\"Right\"] = 3] = \"Right\";\n    Intersection[Intersection[\"Down\"] = 4] = \"Down\";\n})(Intersection = exports.Intersection || (exports.Intersection = {})); // 0,1,2,3,4\nvar Color;\n(function (Color) {\n    Color[Color[\"Black\"] = 0] = \"Black\";\n    Color[Color[\"Red\"] = 1] = \"Red\";\n    Color[Color[\"Yellow\"] = 2] = \"Yellow\";\n    Color[Color[\"Green\"] = 3] = \"Green\";\n    Color[Color[\"Blue\"] = 4] = \"Blue\";\n    Color[Color[\"Purple\"] = 5] = \"Purple\";\n})(Color = exports.Color || (exports.Color = {}));\nvar Information;\n(function (Information) {\n    Information[\"BlockIsDestroyed\"] = \"BlockIsDestroyed\";\n    Information[\"BallIsLost\"] = \"BallIsLost\";\n    Information[\"HitOnBlock\"] = \"HitOnBlock\";\n    Information[\"Clear\"] = \"Clear\";\n})(Information = exports.Information || (exports.Information = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Rect = void 0;\nclass Rect {\n    constructor(coord, size, color) {\n        this.coord = coord;\n        this.size = size;\n        this.color = color;\n    }\n}\nexports.Rect = Rect;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst canvas_1 = require(\"./canvas\");\nconst Fabric_1 = require(\"./Fabric\");\nconst Player_1 = require(\"./Player\");\nconst BallArray_1 = require(\"./BallArray\");\nconst BlockArray_1 = require(\"./BlockArray\");\nconst Statistic_1 = require(\"./Statistic\");\nconst Game_1 = require(\"./Game\");\nlet fabric = new Fabric_1.Fabric([400, 500], [40, 10]);\nlet canvas = new canvas_1.Canvas(400, 500);\nlet player = new Player_1.Player([150, 460], [100, 20], \"blue\");\nlet ballArray = new BallArray_1.BallArray([]);\nlet blockArray = new BlockArray_1.BlockArray([]);\nlet statistic = new Statistic_1.Statistic();\nlet game = new Game_1.Game(canvas, player, ballArray, blockArray, fabric);\nballArray.subscribe(statistic);\nblockArray.subscribe(statistic);\ngame.subscribe(statistic);\ngame.start(fabric);\naddEventListener(\"keypress\", (event) => {\n    if (event.key == \" \")\n        game.pause();\n});\n"],"names":[],"sourceRoot":""}